Структура папок:

src/app/
  ├── catalog/
  │   ├── page.tsx (основная страница каталога)
  │   ├── [category]/
  │   │   ├── page.tsx (страница категории)
  │   │   └── [product]/
  │   │       └── page.tsx (страница продукта)
  │   ├── components/
  │   │   ├── ProductCard.tsx
  │   │   ├── ProductGrid.tsx
  │   │   ├── CategoryFilter.tsx
  │   │   └── ProductDetails.tsx
  │   └── loading.tsx
  └── admin/
      └── catalog/
          ├── page.tsx (список всех продуктов)
          ├── categories/
          │   └── page.tsx (управление категориями)
          ├── products/
          │   ├── page.tsx (управление продуктами)
          │   └── [id]/
          │       └── page.tsx (редактирование продукта)
          └── components/
              ├── ProductForm.tsx
              └── CategoryForm.tsx


Структура БД (schema.ts):

export const productCategories = pgTable('product_categories', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  slug: text('slug').notNull().unique(),
  description: text('description'),
  order: integer('order').default(0),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
})

// Продукты
export const products = pgTable('products', {
  id: serial('id').primaryKey(),
  categoryId: integer('category_id').references(() => productCategories.id),
  name: text('name').notNull(),
  slug: text('slug').notNull().unique(),
  description: text('description'),
  article: text('article'), // артикул
  price: text('price'), // цена (если нужна)
  specifications: jsonb('specifications'), // технические характеристики
  order: integer('order').default(0),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
})

// Изображения продуктов
export const productImages = pgTable('product_images', {
  id: serial('id').primaryKey(),
  productId: integer('product_id').references(() => products.id),
  src: text('src').notNull(),
  alt: text('alt'),
  order: integer('order').default(0),
})

// Варианты продукта (цвета, размеры и т.д.)
export const productVariants = pgTable('product_variants', {
  id: serial('id').primaryKey(),
  productId: integer('product_id').references(() => products.id),
  name: text('name').notNull(), // например, "Черный", "Золото" и т.д.
  value: text('value').notNull(), // код цвета или другое значение
  available: boolean('available').default(true),
})

Серверные actions (src/app/actions/catalog.ts):

'use server'

import { db } from "@/db"
import { products, productCategories, productImages, productVariants } from "@/db/schema"
import { revalidatePath } from "next/cache"

export async function getCategories() {
  return db.select().from(productCategories).orderBy(productCategories.order)
}

export async function getProducts(categoryId?: number) {
  let query = db.select().from(products)
  if (categoryId) {
    query = query.where(eq(products.categoryId, categoryId))
  }
  return query.orderBy(products.order)
}

export async function getProductDetails(id: number) {
  const [product] = await db.select().from(products).where(eq(products.id, id))
  const images = await db.select().from(productImages)
    .where(eq(productImages.productId, id))
  const variants = await db.select().from(productVariants)
    .where(eq(productVariants.productId, id))

  return { product, images, variants }
}

// ... другие actions для создания/обновления/удаления
