import { db } from "../index"
import { sectionsTable } from "../schema"
import { eq } from "drizzle-orm"

const initialData = {
  "section-1": {
    title: "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä 123",
    description: "–ö–∞–∫–æ–µ —Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞",
    link: { name: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url: "/123123" },
    images_block: [
      { src: "/img/item01.png", alt: "Image 1", desc: "ERA" },
      { src: "/img/item02.png", alt: "Image 2", desc: "AMO" },
    ],
    images: ["/img/banner-little.png"],
  },
  "section-2": {
    images: ["/img/banner01.png"],
    link: { name: "–ö–∞–∫–∞—è-—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è", url: "/" },
  },
  "section-3": {
    title: "ERA",
    description: "–ö–æ–ª–ª–µ–∫—Ü–∏—è ERA –≤–æ–ø–ª–æ—â–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π...",
    link: { name: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url: "/" },
    images: ["/img/item-era.png"],
  },
  "section-4": {
    title: "–ö–æ–ª–ª–µ–∫—Ü–∏–∏",
    description: "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π",
    link: { name: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/" },
    images_block: [
      { src: "/img/item01.png", alt: "Banner 1", desc: "ERA", url: "/era" },
      { src: "/img/item02.png", alt: "Banner 2", desc: "AMO", url: "/amo" },
      { src: "/img/item03.png", alt: "Image 3", desc: "TWIST", url: "/twist" },
      { src: "/img/item01.png", alt: "Image 1", desc: "ERA", url: "/era" }
    ],
  },
  "section-5": {
    title: "–ö–∞–∫–æ–π-—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫",
    description: "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞",
    link: { name: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url: "/" },
    images_block: [
      { src: "/img/item10.png", alt: "Item 10", desc: "Description 1" },
      { src: "/img/item11.png", alt: "Item 11", desc: "Description 2" },
      { src: "/img/item12.png", alt: "Item 12", desc: "Description 3" },
    ],
  }
}

async function seed() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const existing = await db.select().from(sectionsTable)
    console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', existing)
    
    if (existing.length === 0) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ
      const inserted = await db.insert(sectionsTable).values({
        id: 1,
        key: 'main',
        data: initialData
      }).returning()
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:', inserted)
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
      const updated = await db
        .update(sectionsTable)
        .set({ data: initialData })
        .where(eq(sectionsTable.key, 'main'))
        .returning()
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', updated)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  } finally {
    console.log('üëã –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É')
    process.exit(0)
  }
}

console.log('üèÅ –ó–∞–ø—É—Å–∫–∞–µ–º seed...')
seed()